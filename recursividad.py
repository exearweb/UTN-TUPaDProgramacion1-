#Pr√°ctico 11: Aplicaci√≥n de la Recursividad 

#Ejercicios

#1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
#funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
#entre 1 y el n√∫mero que indique el usuario

# Funci√≥n recursiva para calcular el factorial de un n√∫mero
def factorial(n):
    if n == 0:  # Caso base
        return 1
    else:
        return n * factorial(n - 1)  # Llamada recursiva

# Funci√≥n que muestra el factorial de todos los n√∫meros entre 1 y el n√∫mero dado por el usuario
def mostrar_factoriales():
    num = int(input("Ingrese un n√∫mero: "))
    for i in range(1, num + 1):
        print(f"El factorial de {i} es {factorial(i)}")

mostrar_factoriales()

#2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
#indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
#especifique.

# Funci√≥n recursiva para calcular el valor de Fibonacci en la posici√≥n n
def fibonacci(n):
    if n == 0:  # Caso base
        return 0
    elif n == 1:  # Caso base
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)  # Llamada recursiva

# Funci√≥n que muestra la serie completa de Fibonacci hasta la posici√≥n indicada por el usuario
def mostrar_fibonacci():
    num = int(input("Ingrese un n√∫mero: "))
    for i in range(num):
        print(f"F({i}) = {fibonacci(i)}")

mostrar_fibonacci()

#3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
#exponente, utilizando la f√≥rmula ùëõ
#ùëö = ùëõ ‚àó ùëõ
#(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.

# Funci√≥n recursiva para calcular la potencia
def potencia(base, exponente):
    if exponente == 0:  # Caso base
        return 1
    else:
        return base * potencia(base, exponente - 1)  # Llamada recursiva

# Funci√≥n para probar la potencia
def mostrar_potencia():
    base = int(input("Ingrese la base: "))
    exponente = int(input("Ingrese el exponente: "))
    print(f"{base}^{exponente} = {potencia(base, exponente)}")

mostrar_potencia()

#4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
#decimal y devuelva su representaci√≥n en binario como una cadena de texto.
#Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y
#unos (1), en base 2. Para convertir un n√∫mero decimal a binario, se puede seguir este
#procedimiento:
#1. Dividir el n√∫mero por 2.
#2. Guardar el resto (0 o 1).
#3. Repetir el proceso con el cociente hasta que llegue a 0.
#4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario.

# Funci√≥n recursiva para convertir un n√∫mero decimal a binario
def decimal_a_binario(n):
    if n == 0:  # Caso base: si el n√∫mero es 0, retornamos una cadena vac√≠a
        return ''
    else:
        # Llamada recursiva: dividir el n√∫mero por 2 y agregar el resto
        return decimal_a_binario(n // 2) + str(n % 2)

# Funci√≥n principal que maneja el caso cuando el n√∫mero es 0
def convertir_a_binario(n):
    if n == 0:
        return '0'  # Caso especial para el 0, ya que su representaci√≥n binaria es "0"
    else:
        return decimal_a_binario(n)

# Ejemplo de uso
numero = int(input("Ingrese un n√∫mero decimal: "))
print(f"El n√∫mero {numero} en binario es: {convertir_a_binario(numero)}")


#5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
#cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.
# Requisitos:
#La soluci√≥n debe ser recursiva.
#No se debe usar [::-1] ni la funci√≥n reversed().

def es_palindromo(palabra):
    # Caso base: si la palabra tiene 0 o 1 caracteres, es un pal√≠ndromo
    if len(palabra) <= 1:
        return True
    # Si el primer y el √∫ltimo car√°cter son iguales, verificamos la subcadena interior
    elif palabra[0] == palabra[-1]:
        return es_palindromo(palabra[1:-1])
    else:
        return False  # Si no coinciden, no es un pal√≠ndromo

# Ejemplo de uso
palabra = input("Ingrese una palabra: ").lower()
print(es_palindromo(palabra))  # True o False

#6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
#n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
#Restricciones:
#No se puede convertir el n√∫mero a string.
#Us√° operaciones matem√°ticas (%, //) y recursi√≥n.

def suma_digitos(n):
    # Caso base: si el n√∫mero es 0, la suma es 0
    if n == 0:
        return 0
    else:
        return n % 10 + suma_digitos(n // 10)  # Sumar el √∫ltimo d√≠gito y llamar recursivamente

# Ejemplo de uso
numero = int(input("Ingrese un n√∫mero entero positivo: "))
print(suma_digitos(numero))


#7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
#bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
#√∫ltimo nivel con un solo bloque.
#Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
#nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
#pir√°mide.

def contar_bloques(n):
    # Caso base: si n es 1, devuelve 1
    if n == 1:
        return 1
    else:
        # Sumar los bloques del nivel actual con los bloques del resto de la pir√°mide
        return n + contar_bloques(n - 1)

# Ejemplo de uso
print(contar_bloques(1))  # Salida: 1
print(contar_bloques(2))  # Salida: 3 (2 + 1)
print(contar_bloques(4))  # Salida: 10 (4 + 3 + 2 + 1)


#8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
#n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
#aparece ese d√≠gito dentro del n√∫mero.

def contar_digito(numero, digito):
    # Caso base: si el n√∫mero es 0, hemos terminado
    if numero == 0:
        return 0
    else:
        # Verificar si el √∫ltimo d√≠gito es igual al d√≠gito buscado
        if numero % 10 == digito:
            return 1 + contar_digito(numero // 10, digito)  # Incrementamos el contador y llamamos recursivamente
        else:
            return contar_digito(numero // 10, digito)  # Solo llamamos recursivamente sin incrementar el contador

# Ejemplo de uso
print(contar_digito(12233421, 2))  # Salida: 3
print(contar_digito(5555, 5))      # Salida: 4
print(contar_digito(123456, 7))   # Salida: 0
